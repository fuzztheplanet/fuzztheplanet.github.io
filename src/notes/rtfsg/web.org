#+TITLE: Web stuff
#+INCLUDE: ../../../templates/rtfsg.org


* General Scanners
:PROPERTIES:
:CUSTOM_ID: scanners
:END:
*** Nuclei

Before running [[https://projectdiscovery.io][projectdiscovery]]'s [[https://github.com/projectdiscovery/nuclei][nuclei]] it is highly recommended to update
the templates and select the relevant ones to avoid unnecessary requests.

#+begin_src shell
$ nuclei -update-directory /path/to/all_templates
$ nuclei -update-templates
$ cp -r /path/to/all_templates/{choose,your,templates} /tmp/nuclei_templates
$ # Run nuclei with GNU parallel (tip from https://twitter.com/PaulWebSec)
$ cat urls.txt | parallel --colsep '/' --jobs 10 nuclei -silent -nc \
                          -templates /tmp/nuclei_templates -o results/{3}.txt -target {1}//{3}
#+end_src

* Enumeration
:PROPERTIES:
:CUSTOM_ID: enumeration
:END:
*** Directory busting
***** ffuf
***** gobuster

#+begin_src shell
gobuster dir -edk -u <url> -w <wordlist> -o <output file>
grep -E 'Status: (200|301|302)' <output file>
#+end_src

*** Extract remote git repositories

Use [[https://github.com/internetwache/GitTools][GitTools]]:

#+begin_src sh
./Dumper/gitdumper.sh <url>.git/ /tmp/lulz
#+end_src

* Authentication Issues
:PROPERTIES:
:CUSTOM_ID: auth
:END:
*** Bypass "403 Forbidden"

Confusion through HTTP headers:

#+BEGIN_EXAMPLE
GET /admin HTTP/1.1
Host: target.com
==> 403 Forbidden

GET /admin HTTP/1.1
X-Original-URL: /admin
Host: target.com
==> 200 OK
#+END_EXAMPLE

Fuzz the url:

#+BEGIN_EXAMPLE
target.com/admin ==> 403 Forbidden
target.com/%2e/admin ==> 200 OK
target.com/./admin ==> 200 OK
target.com/admin/ ==> 200 OK
target.com/admin/%2e ==> 200 OK
target.com/admin/. ==> 200 OK
target.com/admin/* ==> 200 OK

if target.com/admin/core ==> 403 Forbidden
and target.com/admin/page ==> 200 OK
then try target.com/admin/page/;core ==> 200 OK
#+END_EXAMPLE

*** Auth bruteforce

[[https://github.com/vanhauser-thc/thc-hydra][Hydra]] is pretty versatile, it supports HTTP basic/digest authentication,
GET/POST forms and much more (cheatsheet [[https://github.com/gnebbia/hydra_notes][here]]):

#+begin_src shell
$ hydra -h
$ hydra -t 30 -f -o hydra.txt -L users.txt -P passwd.txt \
  -s 80 192.168.1.1 http-get /
$ # ^C to interrupt current session, creates a ./hydra.restore file
$ hydra -R # resume session
#+end_src

* CORS
:PROPERTIES:
:CUSTOM_ID: cors
:END:

Resources:

- [[https://portswigger.net/web-security/cors][Portswiger on CORS]]

  Tools:

  - [[https://github.com/Santandersecurityresearch/corsair_scan][Corsair Scan]]

* XSS
:PROPERTIES:
:CUSTOM_ID: xss
:END:

Resources:
- [[https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection][PayloadAllTheThings]]: Plenty of payloads and bypass techniques.
- [[https://portswigger.net/web-security/cross-site-scripting/cheat-sheet][PortSwigger's XSS cheatsheet]].
- [[https://brutelogic.com.br/blog/][Brute Logic]]: Hosts a bunch of XSS-related resources.

  Tools:
  - [[https://xsshunter.com/features][xsshunter.com]]: Host a custom subdomain which collects and notify of XSS
    payload triggers.

* SSRF
:PROPERTIES:
:CUSTOM_ID: ssrf
:END:

If you find a SSRF possiblity, then you should try to use the gopher protocol
to escalate it further to RCE (check-out [[https://github.com/tarunkant/Gopherus][Gopherus]] to craft payloads). This [[https://sirleeroyjenkins.medium.com/just-gopher-it-escalating-a-blind-ssrf-to-rce-for-15k-f5329a974530][bug
bounty report]] by [[https://twitter.com/SirLeeroyJenkin][Leeroy Jenkins]] shows how to hit internal firewall-protected
targets via a blind SSRF with a 302 redirect trick. He then uses the gopher
protocol to finally achieve RCE on a local redis server.

* Request Smuggling
:PROPERTIES:
:CUSTOM_ID: smuggling
:END:

Resources:
- [[https://honoki.net/2020/02/18/http-request-smuggling-5-practical-tips/][5 Practical Tips]] by [[https://honoki.net/][honoki]].

  Tools:
  - [[https://github.com/defparam/smuggler][smuggler]] by [[https://github.com/defparam][defparam]].
* Frameworks / CMS
:PROPERTIES:
:CUSTOM_ID: frameworks
:END:
*** Django
*** Flask

Use [[https://github.com/Paradoxis/Flask-Unsign][Flask-Unsign]] to read, forge or crack session tokens generated by Flask.

*** Spring-boot

Look for //heapdump/, //env/, //trace/ endpoints, they can contain sensitive
information.

*** Symphony

RCE is possible via ESI fragments, check [[https://book.hacktricks.xyz/pentesting/pentesting-web/symphony][Hacktricks on Symphony]] (mirror of
[[https://www.ambionics.io/blog/symfony-secret-fragment][Ambionics.io]]).

*** Tomcat

Tomcat + NGINX:

#+begin_example
https://test.example.com/manager/html => 404
https://test.example.com/foo/..;/manager/html => 200
#+end_example

* Intercept HTTP Traffic
:PROPERTIES:
:CUSTOM_ID: proxy
:END:
*** Browsers

I leave this here because I always look for the proxy settings on chromium
and never seem to find them. Start chromium from the command line with
~chromium --proxy-server=127.0.0.1:8080~.

FoxyProxy is a handy add-on for [[https://addons.mozilla.org/fr/firefox/addon/foxyproxy-standard/][firefox]] and [[https://chrome.google.com/webstore/detail/foxyproxy-standard/gcknhkkoolaabfmlnjonogaaifnjlfnp?hl=fr][chromium]] to change proxy
settings on-the-fly.

*** CLI applications

First check out [[https://blog.ropnop.com][ROPNOP]]'s [[https://blog.ropnop.com/proxying-cli-tools/][post]] on intercepting HTTP(S) traffic from
CLI-tools.

***** Environment variables

Some programs like curl and wget will look for specific environment
variables (case sensitive) and use them as proxy settings. Either check
the documentation/source of the tool if possible or just set:

#+begin_src shell
$ my_proxy="127.0.0.1:8080"
$ export HTTP_PROXY="$my_proxy" http_proxy="$my_proxy" HTTPS_PROXY="$my_proxy" https_proxy="$my_proxy"
$ # run some tools, intercept requests and responses in the proxy
$ unset HTTP_PROXY http_proxy HTTPS_PROXY https_proxy
#+end_src

* SQL Injections
:PROPERTIES:
:CUSTOM_ID: sql
:END:
*** MSSQL

Retrieve user hashes:

#+begin_example
select name,master.sys.fn_sqlvarbasetostr(password_hash) from master.sys.sql_logins
#+end_example

* GraphQL
:PROPERTIES:
:CUSTOM_ID: graphql
:END:
*** Resources

- [[https://graphql.org/learn/][GraphQL "learn" documentation]]
- [[https://medium.com/@the.bilal.rizwan/graphql-common-vulnerabilities-how-to-exploit-them-464f9fdce696][Overview of common vulnerabilities]]
- [[https://voidsec.com/graphql-security-overview-and-testing-tips/][GraphQL security overview by voidsec]]

*** Tools of the trade

- [[https://apis.guru/graphql-voyager/][GraphQL Voyager]]: Visualisation of graphql data schemes
- [[https://github.com/swisskyrepo/GraphQLmap][GraphQLMap]] (by [[https://github.com/swisskyrepo][Swissky]]): Explore and attack graphql endpoints
- [[https://gitlab.com/dee-see/graphql-path-enum][graphql-path-enum]]: List the ways to query for a specific object

*** Introspection

Run the following introspection query to retrieve information about the
schema and objects. The response can directly be copied into [[https://apis.guru/graphql-voyager/][GraphQL Voyager]]
(Change Schema -> Introspection) for visualisation.

#+BEGIN_EXAMPLE
query IntrospectionQuery {
    __schema {
    queryType { name }
    mutationType { name }
    subscriptionType { name }
    types { ...FullType }
    directives {
        name description locations
        args { ...InputValue }}}}

fragment FullType on __Type {
    kind name description

    fields(includeDeprecated: true) {
    name description
    args { ...InputValue }
    type { ...TypeRef }
    isDeprecated deprecationReason }

    inputFields { ...InputValue }
    interfaces { ...TypeRef }

    enumValues(includeDeprecated: true) {
    name description isDeprecated deprecationReason }

    possibleTypes { ...TypeRef }}

fragment InputValue on __InputValue {
    name description
    type { ...TypeRef }
    defaultValue }

fragment TypeRef on __Type {
    kind name ofType {
    kind name ofType {
        kind name ofType {
        kind name ofType {
            kind name ofType {
            kind name ofType {
                kind name ofType {
                kind name }}}}}}}}
#+END_EXAMPLE

Alternatively, use [[https://github.com/doyensec/inql][InQL]] to run introspection queries and get the results as
JSON, HTML and more.

*** Searching for a path

Use [[https://gitlab.com/dee-see/graphql-path-enum][graphql-path-enum]] to check which queries lead to some /TargetObject/, the
full schema is required.

#+BEGIN_SRC shell
graphql-path-enum -i ./schema.json -t TargetObject
#+END_SRC

* Web Servers
:PROPERTIES:
:CUSTOM_ID: web-servers
:END:
*** Nginx
***** Off-By-One Slash

This happens when the trailing slash is omitted in the =nginx.conf= file. As in
the following example:

#+begin_example
location /foobar {
 alias /var/www/foobar/;
}
#+end_example

Then a request to https://www.example.com/foobar../new_path/file.html will
effectively be translated to https://www.example.com/new_path/file.html.

While auditing a Nginx configuration, always ensure that trailing slashes are
appended in configurations containing an "alias" directive.

***** Missing root location

This default configuration doesn't specify a location for the server's root
directory:

#+begin_example
server {
        root /etc/nginx;

        location /hello.txt {
                try_files $uri $uri/ =404;
                proxy_pass http://127.0.0.1:8080/;
        }
}
#+end_example

The root directory here is =/etc/nginx=, yet there is no "location" directive
associated with =/=. This means that requests to =/etc/nginx/nginx.conf=, for
example, are possible.

***** SSRF and proxy_pass bypass

The following feature, abusing placeholders / variables and the "proxy_pass"
directive can be used to perform requests to arbitrary locations.

#+begin_example
server {
  server_name localhost;

  location ~ /proxy/(.*)/(.*)$ {
    proxy_pass http://$1/$2;
  }
}
#+end_example

Some locations could be protected by IP address whitelisting:

#+begin_example
        location /secrets/ {
            allow 127.0.0.1;
            deny all;
            autoindex on;
            alias /var/www/app/secrets/;
        }
#+end_example

Then, try to use services like [[https://nip.io/][nip.io]] or [[https://lock.cmpxchg8b.com/rebinder.html][rebinder]] to resolve to the correct
private IP address.

***** Tools

- [[https://github.com/yandex/gixy][Gixy]]: tool to analyze Nginx configurations.
- [[https://github.com/stark0de/nginxpwner][Nginxpwner]]: look for common Nginx misconfigurations and vulnerabilities.
- [[https://github.com/shiblisec/Kyubi][Kyubi]]: discover Nginx alias traversal misconfigurations.

***** Resources

- [[https://book.hacktricks.wiki/en/network-services-pentesting/pentesting-web/nginx.html][Hacktricks on Nginx]].
* Misc
:PROPERTIES:
:CUSTOM_ID: misc
:END:
*** Apache James 2.3.2 RCE

- [[https://www.exploit-db.com/exploits/35513][https://www.exploit-db.com/exploits/35513]] : Exploit gets executed when any
  user logs in on the target host.

*** Fuzz through NTLM authentication

Use JavaScript XHR to fuzz websites that authenticate with NTLM on every
single request. This avoids having to manually deal with the authentication
process by simply running the JS in the browser console while being already
logged in on the target.

#+begin_src javascript
// Update me !
var baseurl = "https://www.example.com";
var method = "GET";
var wordlist = ["super", "secret", "paths"];

for (var i=0; i < wordlist.length; i++) {

  var xhr = new XMLHttpRequest();
  var url = baseurl + '/' + wordlist[i];

  xhr.open(method, url);
  xhr.send("");
  if (xhr.status == 200) {
    console.log(url);
  }
}
#+end_src

*** Enumerating VHOSTs (Virtual Hosts)

#+begin_src shell
ffuf -u 'http://example.com' -H 'Host: FUZZ.example.com' -w subdomains.txt -o vhosts.txt
#+end_src

*** Wordpress

Enumeration with [[https://github.com/wpscanteam/wpscan][wpscan]]:

#+begin_src sh
wpscan --detection-mode aggressive --interesting-findings-detection aggressive --plugins-detection aggressive -e ap,at,tt,cb,dbe --rua -o wpscan.txt --url 'https://www.example.com'
#+end_src

Brute-force login credentials:

#+begin_src sh
wpscan -U admin --passwords rockyou.txt --url 'https://www.example.com'
#+end_src

*** Webshells
***** ASP

- [[https://github.com/tennc/webshell/blob/master/asp/webshell.asp][webshell by tennc]].
